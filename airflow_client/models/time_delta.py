# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# coding: utf-8

"""
    Airflow API (Stable)

    Apache Airflow management API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@airflow.apache.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from airflow_client.configuration import Configuration


class TimeDelta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'days': 'int',
        'seconds': 'int',
        'microseconds': 'int'
    }

    attribute_map = {
        'type': '__type',
        'days': 'days',
        'seconds': 'seconds',
        'microseconds': 'microseconds'
    }

    def __init__(self, type=None, days=None, seconds=None, microseconds=None, local_vars_configuration=None):  # noqa: E501
        """TimeDelta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._days = None
        self._seconds = None
        self._microseconds = None
        self.discriminator = None

        self.type = type
        self.days = days
        self.seconds = seconds
        self.microseconds = microseconds

    @property
    def type(self):
        """Gets the type of this TimeDelta.  # noqa: E501


        :return: The type of this TimeDelta.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeDelta.


        :param type: The type of this TimeDelta.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def days(self):
        """Gets the days of this TimeDelta.  # noqa: E501


        :return: The days of this TimeDelta.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this TimeDelta.


        :param days: The days of this TimeDelta.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and days is None:  # noqa: E501
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501

        self._days = days

    @property
    def seconds(self):
        """Gets the seconds of this TimeDelta.  # noqa: E501


        :return: The seconds of this TimeDelta.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this TimeDelta.


        :param seconds: The seconds of this TimeDelta.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and seconds is None:  # noqa: E501
            raise ValueError("Invalid value for `seconds`, must not be `None`")  # noqa: E501

        self._seconds = seconds

    @property
    def microseconds(self):
        """Gets the microseconds of this TimeDelta.  # noqa: E501


        :return: The microseconds of this TimeDelta.  # noqa: E501
        :rtype: int
        """
        return self._microseconds

    @microseconds.setter
    def microseconds(self, microseconds):
        """Sets the microseconds of this TimeDelta.


        :param microseconds: The microseconds of this TimeDelta.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and microseconds is None:  # noqa: E501
            raise ValueError("Invalid value for `microseconds`, must not be `None`")  # noqa: E501

        self._microseconds = microseconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeDelta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeDelta):
            return True

        return self.to_dict() != other.to_dict()
